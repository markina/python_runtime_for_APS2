# from aps2.SetviceId import ServiceId
# from aps2.Info import Info

import aps2.Info
import aps2.ServiceId

import aps2.uLogging
import aps2.apsapi

import re
import os


class InfoParse:
    NOT_SET = "NOT_SET"

    __aps_id = None
    __current_function = None
    __pem_path_certificate = None
    __apsc_pem_path_certificate = None
    __aps_api = None

    @staticmethod
    def delete():
        InfoParse.__aps_id = None
        InfoParse.__current_function = None
        InfoParse.__pem_path_certificate = None
        InfoParse.__apsc_pem_path_certificate = None
        InfoParse.__aps_api = None

    @staticmethod
    def get_aps_id():
        if InfoParse.__aps_id:
            return InfoParse.__aps_id
        else:
            InfoParse.set_aps_id()
            return InfoParse.__aps_id

    @staticmethod
    def get_current_function():
        if InfoParse.__current_function:
            return InfoParse.__current_function
        else:
            InfoParse.set_current_function()
            return InfoParse.__current_function

    @staticmethod
    def get_aps_api():
        if InfoParse.__aps_api:
            return InfoParse.__aps_api
        InfoParse.__aps_api = aps2.apsapi.API(aps2.Info.Info.get_HTTP_APS_CONTROLLER_URI())
        return InfoParse.__aps_api

    @staticmethod
    def get_pem_path_certificate():
        if InfoParse.__pem_path_certificate:
            return InfoParse.__pem_path_certificate
        InfoParse.__pem_path_certificate = os.environ['APP_PATH'] + '/config/' + str(aps2.Info.Info.get_HTTP_APS_INSTANCE_ID()) + '.pem'
        return InfoParse.__pem_path_certificate

    @staticmethod
    def get_apsc_pem_path_certificate():
        if InfoParse.__apsc_pem_path_certificate:
            return InfoParse.__apsc_pem_path_certificate
        InfoParse.__apsc_pem_path_certificate = os.environ['APP_PATH'] + '/config/' + str(aps2.Info.Info.get_HTTP_APS_INSTANCE_ID()) + '.apsc.pem'
        return InfoParse.__apsc_pem_path_certificate

    @staticmethod
    def set_aps_id():

        """
        For example:
        /clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/createCounter/pathparam1
        =>
        "0f9b79e1-de01-4af6-9ff6-ccc589b11978"
        """
        len_service_id = len('/' + aps2.ServiceId.ServiceId.get_name_service_id() + '/')
        if len_service_id > len(aps2.Info.Info.get_PATH_INFO()):
            # logger.info("length /service_id/ > len(hpr.PATH_INFO)")
            # logger.info("=> PATH_INFO not consist aps_id")
            InfoParse.__aps_id = InfoParse.NOT_SET
        string_without_service_id = aps2.Info.Info.get_PATH_INFO()[len_service_id:]
        # logger.info("string_without_service_id = " + string_without_service_id)
        pattern = re.compile('[\w-]{36}')
        if pattern.match(string_without_service_id):
            aps_id = string_without_service_id[:36]
            # logger.info("aps_id = " + aps_id)
            InfoParse.__aps_id = aps_id

    @staticmethod
    def set_current_function():
        # For example:
        # /clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/createCounter/pathparam1
        # =>
        # "/createCounter/pathparam1"

        if InfoParse.get_aps_id() == InfoParse.NOT_SET:
            len_service_id = len('/' + aps2.ServiceId.ServiceId.get_name_service_id() + '/')
            current_function = aps2.Info.Info.get_PATH_INFO()[len_service_id:]
        else:
            len_service_id_aps_id = len('/' + aps2.ServiceId.ServiceId.get_name_service_id() + '/' + InfoParse.__aps_id)
            current_function = aps2.Info.Info.get_PATH_INFO()[len_service_id_aps_id:]

        if current_function == "":
            current_function = "/"
        InfoParse.__current_function = current_function


