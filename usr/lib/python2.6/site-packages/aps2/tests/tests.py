import unittest
import commands
import os
import re
import subprocess

import simplejson as json
import ordereddict

import aps2.parsing
import aps2.types2
import aps2.service2
import aps2.utils

import aps2.Info
import aps2.InfoParse
import aps2.apsapi

os.environ['APP_PATH'] = '/usr/local/share/applications/pycloud/'


def get_simple_environ():
    environ = {
            "REQUEST_METHOD": "POST",
            "REQUEST_URI": "//endpoint000/clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/test_static_1/Petia",
            'HTTP_APS_INSTANCE_ID': '7afc806c-9ce9-416f-bc75-c844a3d07c8f',
            'HTTP_APS_CONTROLLER_URI': 'https://10.112.32.128:6308/',
            "CONTENT_LENGTH": 0,
            }
    return environ


def get_environ_Petia():
    environ = get_simple_environ()
    environ["PATH_INFO"] = '/clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/test_static_1/Petia'
    return environ


class TestStringMethods(unittest.TestCase):

    def test_parsed_environ(self):
        environ = get_simple_environ()
        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        self.assertEquals(parsed_environ.get("REQUEST_METHOD"), "POST")
        self.assertEquals(parsed_environ.get('HTTP_APS_INSTANCE_ID'), '7afc806c-9ce9-416f-bc75-c844a3d07c8f')

    def test_load_appmeta(self):
        environ = get_simple_environ()

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)

        appmeta_namespace = re.search('\{(.*)\}', types.appmeta.tag).group(1)
        services = types.appmeta.findall(".//{" + appmeta_namespace + "}service")
        for service in services:
            if service.get('id') == "clouds":
                script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')
                self.assertEquals(script_path, "scripts/clouds.py")
                script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
                self.assertEquals(script_path, "clouds")
            if service.get('id') == "contexts":
                script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')
                self.assertEquals(script_path, "scripts/contexts.py")
                script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
                self.assertEquals(script_path, "contexts")

    def test_list_services(self):
        environ = get_simple_environ()

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)

        self.assertEquals(
            types.list_services["aps"]["id"],
            "7afc806c-9ce9-416f-bc75-c844a3d07c8f"
        )
        self.assertEquals(
            types.list_services["clouds"]["type"],
            "http://aps-standard.org/samples/starter/cloud/1.0"
        )
        self.assertEquals(
            types.list_services["aps"]["endpoint"],
            "https://endpoint.a.apscloudstest.apsdemo.org:443/endpoint000/"
        )

    def test_get_type(self):
        environ = get_simple_environ()

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)
        simple_schema = types.get_type("http://aps-standard.org/samples/starter/cloud/1.0")
        self.assertEquals(simple_schema[0]["implements"][0], "http://aps-standard.org/types/core/application/1.0")
        self.assertEquals(simple_schema[0]["name"], "cloud")

    def test_tree_schemas(self):
        environ = get_environ_Petia()

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)
        current_service = aps2.service2.Service(types, parsed_environ)

        self.assertEquals(current_service.name, "clouds")
        self.assertEquals(current_service.tree_schemas.schema[0]["name"], "cloud")
        self.assertEquals(current_service.tree_schemas.schema[0]["implements"][0], "http://aps-standard.org/types/core/application/1.0")
        self.assertEquals(current_service.tree_schemas.schema[0]["operations"]["calculateSomething"]["path"], "/calculateSomething/{paramX}")

        self.assertEquals(len(current_service.tree_schemas.list_schema), 1)

        self.assertEquals(current_service.tree_schemas.list_schema[0].schema[0]["operations"]["upgrade"]["path"], "/upgrade")
        self.assertEquals(current_service.tree_schemas.list_schema[0].schema[0]["operations"]["upgrade"]["verb"], "POST")

        self.assertEquals(len(current_service.tree_schemas.list_schema[0].list_schema), 1)

        self.assertEquals(current_service.tree_schemas.list_schema[0].list_schema[0].schema[0]["operations"]["provision"]["name"], "provision")
        self.assertEquals(current_service.tree_schemas.list_schema[0].list_schema[0].schema[0]["operations"]["unprovision"]["name"], "unprovision")
        self.assertEquals(current_service.tree_schemas.list_schema[0].list_schema[0].schema[0]["operations"]["unprovision"]["verb"], "DELETE")

        self.assertEquals(current_service.tree_schemas.list_schema[0].list_schema[0].list_schema, [])

    def test_list_valid_path_verbs(self):
        environ = get_environ_Petia()

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)
        current_service = aps2.service2.Service(types, parsed_environ)
        list_valid_paths = aps2.utils.get_valid_path_verbs(current_service.tree_schemas)

        self.assertTrue(any(pv.verb == "POST" and pv.path == "/" for pv in list_valid_paths))
        self.assertTrue(any(pv.verb == "DELETE" and pv.path == "/" for pv in list_valid_paths))
        self.assertTrue(any(pv.verb == "PUT" and pv.path == "/" for pv in list_valid_paths))
        self.assertTrue(any(pv.verb == "POST" and pv.path == "/test_1/{person}/{name}" for pv in list_valid_paths))
        self.assertTrue(any(pv.verb == "POST" and pv.path == "/test_static_1/{name}" for pv in list_valid_paths))


    def test_find_path_verbs_test_static_1(self):
        environ = get_simple_environ()

        environ["PATH_INFO"] = '/clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/test_static_1/Petia'

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)
        current_service = aps2.service2.Service(types, parsed_environ)
        list_valid_paths = aps2.utils.get_valid_path_verbs(current_service.tree_schemas)

        pv = aps2.utils.find_appropriate_path_verbs(list_valid_paths, parsed_environ)
        self.assertTrue(pv.verb == "POST" and pv.path == "/test_static_1/{name}")

    def test_find_path_verbs_post(self):
        environ = get_simple_environ()

        environ["PATH_INFO"] = '/clouds'

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)
        current_service = aps2.service2.Service(types, parsed_environ)
        list_valid_paths = aps2.utils.get_valid_path_verbs(current_service.tree_schemas)

        pv = aps2.utils.find_appropriate_path_verbs(list_valid_paths, parsed_environ)
        self.assertTrue(pv.verb == "POST" and pv.path == "/")

    def test_find_path_verbs_delete(self):
        environ = get_simple_environ()
        environ["REQUEST_METHOD"] = "DELETE"
        environ["PATH_INFO"] = '/clouds/e143dd38-65dd-4ddd-b89e-d05ecec32729'

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)
        current_service = aps2.service2.Service(types, parsed_environ)
        list_valid_paths = aps2.utils.get_valid_path_verbs(current_service.tree_schemas)

        pv = aps2.utils.find_appropriate_path_verbs(list_valid_paths, parsed_environ)
        self.assertTrue(pv.verb == "DELETE" and pv.path == "/")

    def test_find_path_verbs_createKey(self):
        environ = get_simple_environ()

        environ["PATH_INFO"] = '/clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/createKey/pathparam1/ps_val'

        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)
        current_service = aps2.service2.Service(types, parsed_environ)
        list_valid_paths = aps2.utils.get_valid_path_verbs(current_service.tree_schemas)

        pv = aps2.utils.find_appropriate_path_verbs(list_valid_paths, parsed_environ)
        self.assertTrue(pv.verb == "POST" and pv.path == "/createKey/{pathparam}/{ps}")

if __name__ == '__main__':

    suite = unittest.TestLoader().loadTestsFromTestCase(TestStringMethods)
    unittest.TextTestRunner(verbosity=2).run(suite)
