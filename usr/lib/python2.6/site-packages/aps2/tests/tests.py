import unittest
import commands
import os
import re
import subprocess


import aps2.parsing
import aps2.types2

import aps2.Info
import aps2.InfoParse
import aps2.apsapi

os.environ['APP_PATH'] = '/usr/local/share/applications/pycloud/'


class TestStringMethods(unittest.TestCase):

    def test_load_appmeta(self):
        environ = {
            "REQUEST_URI": "//endpoint000/clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/test_static_1/Petia",
            'HTTP_APS_INSTANCE_ID': '7afc806c-9ce9-416f-bc75-c844a3d07c8f',
            'HTTP_APS_CONTROLLER_URI': 'https://10.112.32.128:6308/',
            "CONTENT_LENGTH": 0,
            }
        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)

        appmeta_namespace = re.search('\{(.*)\}', types.appmeta.tag).group(1)
        services = types.appmeta.findall(".//{" + appmeta_namespace + "}service")
        for service in services:
            if service.get('id') == "clouds":
                script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')
                self.assertEquals(script_path, "scripts/clouds.py")
                script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
                self.assertEquals(script_path, "clouds")
            if service.get('id') == "contexts":
                script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')
                self.assertEquals(script_path, "scripts/contexts.py")
                script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
                self.assertEquals(script_path, "contexts")

    def test_list_services(self):
        environ = {
            "REQUEST_URI": "//endpoint000/clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/test_static_1/Petia",
            'HTTP_APS_INSTANCE_ID': '7afc806c-9ce9-416f-bc75-c844a3d07c8f',
            'HTTP_APS_CONTROLLER_URI': 'https://10.112.32.128:6308/',
            "CONTENT_LENGTH": 0,
            }
        parsed_environ = aps2.parsing.ParsedEnviron(environ)
        types = aps2.types2.Types(parsed_environ)

        self.assertEquals(
            types.list_services["aps"]["id"],
            "7afc806c-9ce9-416f-bc75-c844a3d07c8f"
        )
        self.assertEquals(
            types.list_services["clouds"]["type"],
            "http://aps-standard.org/samples/starter/cloud/1.0"
        )
        self.assertEquals(
            types.list_services["aps"]["endpoint"],
            "https://endpoint.a.apscloudstest.apsdemo.org:443/endpoint000/"
        )

    # def test_a(self):
    #     """
    #     curl
    #     -X POST
    #     --data  '{"type": "uri/uri/uri", "time": "23:00/20.08.15", "serial":"2.0", "source": {"type":"type/type/type", "id":"AB123"}}'
    #     -H 'APS-Instance-Id: 7afc806c-9ce9-416f-bc75-c844a3d07c8f'
    #     -H 'APS-Controller-Uri: https://10.112.32.128:6308/'
    #     -E /usr/local/pem/APS/certificates/controller.pem
    #     -k "https://endpoint.a.apscloudstest.apsdemo.org/endpoint000/clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/test_static_1/Petia"
    #     """
    #
    #     data_struct = '{' \
    #                        '"type" : "uri/uri/uri",' \
    #                        '"time" : "23:00/20.08.15",' \
    #                        '"serial" : "2.0",' \
    #                        '"source" :' \
    #                        '{' \
    #                             '"type" : "type/type/type",' \
    #                             '"id" : "AB123"' \
    #                        '}' \
    #                    '}'
    #     aps_api = aps2.apsapi.API('https://endpoint.a.apscloudstest.apsdemo.org/')
    #     aps_api.POST(
    #         '/endpoint000/clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/test_static_1/Petia',
    #         headers={'APS-Instance-Id': '7afc806c-9ce9-416f-bc75-c844a3d07c8f'},
    #         data=data_struct,
    #         cert='/usr/local/pem_test/controller.pem'
    #     )
    #
    #     # print aps2.Info.Info.get_REQUEST_METHOD()
    #     print "aps_api - ok"

    def test_b(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

if __name__ == '__main__':

    suite = unittest.TestLoader().loadTestsFromTestCase(TestStringMethods)
    unittest.TextTestRunner(verbosity=2).run(suite)
