import aps2.Types
import aps2.Info
import aps2.printer

import re
import os
import simplejson as json
import ordereddict

logger = aps2.uLogging.get_logger('/tmp/myapp.log', aps2.uLogging.DEBUG)

SUFFIX_NF_SCHEMA = '.schema'


class ServiceId:
    __name = None
    __json = None
    __schema_json = None

    @staticmethod
    def delete():
        ServiceId.__name = None
        ServiceId.__schema_json = None
        ServiceId.__json = None

    @staticmethod
    def get_schema_json():
        """
        :return: json from cache 'same_name.schema' or from APS_API
        it's full information about service. For example:
        {
        "aps": {
                "href": "https://apsc.aps-standard.org/types/90",
                "id": "90"
        },
        "apsVersion": "2.0",
        "id": "http://aps-standard.org/samples/starter/cloud/1.0",
        "implements": [
                "http://aps-standard.org/types/core/application/1.0"
        ],
        "name": "cloud",
        "operations": {
                "calculateSomething": {
                        "parameters": {
                                "paramA": {
                                        "kind": "query",
                                        "type": "integer"
                                }
                        },
                        "path": "/calculateSomething/{paramX}",
                        "response": {
                                "type": "string"
                        },
                        "verb": "GET"
                }
        }
        """
        if ServiceId.__schema_json:
            return ServiceId.__schema_json
        dir_schemas = os.environ['APP_PATH'] + 'schemas/'
        if not os.path.exists(dir_schemas):
            os.makedirs(dir_schemas)
        nf_schema = ServiceId.get_name_service_id() + SUFFIX_NF_SCHEMA
        if os.path.isfile(dir_schemas + nf_schema):
            with open(dir_schemas + nf_schema) as infile:
                schema = json.loads(infile.read(), object_pairs_hook=ordereddict.OrderedDict)
        else:
            schema = aps2.InfoParse.InfoParse.get_APS_API().GET(
                "/aps/2/types/?id=" + ServiceId.get_json_service_id()["type"],
                None,
                None,
                aps2.Info.Info.get_PATH_INFO()
            )
            with open(dir_schemas + nf_schema, 'wb') as outfile:
                outfile.write('%s' % schema)
        ServiceId.__schema_json = schema[0]
        return schema[0]

    def __init__(self):
        pass

    @staticmethod
    def get_name_service_id():
        if ServiceId.__name:
            return ServiceId.__name
        ServiceId.set_json_and_name()
        return ServiceId.__name

    @staticmethod
    def get_json_service_id():
        if ServiceId.__json:
            return ServiceId.__json
        ServiceId.set_json_and_name()
        return ServiceId.__json

    @staticmethod
    def set_json_and_name():
        """
        for ex:
        By PATH_INFO = /clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/createCounter/pathparam1
        =>
        __name = clouds,
        __json= ...
        """
        for item in aps2.Types.Types.get_application_services_json():
            pattern = re.compile('/' + item)
            if pattern.match(aps2.Info.Info.get_PATH_INFO()):
                ServiceId.__json = aps2.Types.Types.get_application_services_json()[item]
                ServiceId.__name = item
                break
        else:
            raise Exception("Error: service_id in PATH_INFO not exist!")

    @staticmethod
    def get_resource_with_old_info():
        old_json = aps2.InfoParse.InfoParse.get_aps_api().GET(
            "/aps/2/resources/" + aps2.InfoParse.InfoParse.get_aps_id(),
            None, None,
            aps2.InfoParse.InfoParse.get_pem_path_certificate()
        )

        constructor = get_constructor()
        properties = get_properties(ServiceId.get_schema_json())

        old_resource = constructor()
        for prop in properties:
            setattr(old_resource, prop, old_json[prop])
        logger.info("ServiceId: get_resource(): OLD = " + old_resource.apphost)
        logger.info("ServiceId: get_resource(): OLD = " + old_resource.cloudadmin)
        logger.info("ServiceId: get_resource(): OLD = " + old_resource.cloudpass)

        return old_resource


def get_constructor():
    class_name = ServiceId.get_schema_json()["name"]
    tree_appmeta = aps2.Types.Types.get_appmeta_et_root()
    appmeta_namespace = re.search('\{(.*)\}', tree_appmeta.tag).group(1)
    services = tree_appmeta.findall(".//{" + appmeta_namespace + "}service")

    script_path = ""
    for service in services:
        if service.get('id') == aps2.ServiceId.ServiceId.get_name_service_id():
            script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')  # TODO
            script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
            break

    import_script = __import__(script_path)
    constructor = getattr(import_script, class_name)

    return constructor


def get_properties(schema):
    properties = []
    json_properties = schema["properties"]
    for prop in json_properties.items():
        properties.append(str(prop[0]))
    return properties

