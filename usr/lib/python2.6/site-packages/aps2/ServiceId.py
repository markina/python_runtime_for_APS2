import aps2.printer
import re
import os

import simplejson as json
import ordereddict

logger = aps2.uLogging.get_logger('/tmp/myapp.log', aps2.uLogging.DEBUG)


SUFFIX_NF_SCHEMA = '.schema'


class ServiceId:
    __name = None
    __json = None
    __schema_json = None

    @staticmethod
    def get_schema_json(hpr):
        """
        :return: json from cache 'same_name.schema' or from APS_API
        it's full information about service. For example:
        {
        "aps": {
                "href": "https://apsc.aps-standard.org/types/90",
                "id": "90"
        },
        "apsVersion": "2.0",
        "id": "http://aps-standard.org/samples/starter/cloud/1.0",
        "implements": [
                "http://aps-standard.org/types/core/application/1.0"
        ],
        "name": "cloud",
        "operations": {
                "calculateSomething": {
                        "parameters": {
                                "paramA": {
                                        "kind": "query",
                                        "type": "integer"
                                }
                        },
                        "path": "/calculateSomething/{paramX}",
                        "response": {
                                "type": "string"
                        },
                        "verb": "GET"
                }
        }
        """
        if ServiceId.__schema_json:
            return ServiceId.__schema_json
        dir_schemas = os.environ['APP_PATH'] + 'schemas/'
        if not os.path.exists(dir_schemas):
            os.makedirs(dir_schemas)
        nf_schema = ServiceId.get_name_service_id(hpr) + SUFFIX_NF_SCHEMA
        if os.path.isfile(dir_schemas + nf_schema):
            # logger.info(nf_schema + " EXIST!")
            with open(dir_schemas + nf_schema) as infile:
                schema = json.loads(infile.read(), object_pairs_hook=ordereddict.OrderedDict)
        else:
            # logger.info(nf_schema + " NOT exist!")
            schema = hpr.APS_API.GET("/aps/2/types/?id=" + ServiceId.get_json_service_id(hpr)["type"], None, None, hpr.PATH_CERTIFICATE)
            with open(dir_schemas + nf_schema, 'wb') as outfile:
                outfile.write('%s' % schema)
        ServiceId.__schema_json = schema[0]
        return schema[0]


    # For example:
    # self.main_name = clouds
    # self.json = {
    #         "type": "http://aps-standard.org/samples/starter/cloud/1.0",
    #         "name": "VPS cloud globals",
    #         "summary": "VPS cloud application global service",
    #         "schema": "/aps/2/types/90"
    # }
    def __init__(self):
        pass
    #
    # def log_to_string(self):
    #     aps2.printer.print_line()
    #     logger.info("ServiceId:")
    #     logger.info("main_name = " + self.main_name)
    #     aps2.printer.print_json("json = ", self.json)
    #     aps2.printer.print_line()

    @staticmethod
    def get_name_service_id(hpr):

        if ServiceId.__name:
            return ServiceId.__name
        ServiceId.fill_members(hpr)
        return ServiceId.__name

    @staticmethod
    def get_json_service_id(hpr):
        if ServiceId.__json:
            return ServiceId.__json
        ServiceId.fill_members(hpr)
        return ServiceId.__json

    @staticmethod
    def fill_members(hpr):
        # 'get_service_id' get current_service_id by PATH_INFO
        # For example:
        # /clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/createCounter/pathparam1
        # =>
        # ServiceId(main_name=clouds, json=...)
        # logger.info("PATH_INFO:")
        # logger.info(hpr.PATH_INFO)
        for item in aps2.Types.Types.get_application_services_json(hpr):
            # logger.info("item = " + item)
            pattern = re.compile('/' + item)
            if pattern.match(hpr.PATH_INFO):
                ServiceId.__json = aps2.Types.Types.get_application_services_json(hpr)[item]
                ServiceId.__name = item
                break
        else:
            raise Exception("Error: service_id in PATH_INFO not exist!")
        # logger.info("service_id :")
        # logger.info("main_name = " + service_id.main_name)
        # logger.info("json = " + json.dumps(service_id.json, indent=8))
