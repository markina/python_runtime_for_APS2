import os
import simplejson as json
import ordereddict
import xml.etree.ElementTree as ET

import aps2.apsapi


class Types(object):
    NAME_FILE_LIST_SERVICES = 'list_services.json'
    NAME_FILE_APP_META = 'APP-META.xml'

    def __init__(self, parsed_environ):
        self.__APS_API = aps2.apsapi.API(parsed_environ.get("HTTP_APS_CONTROLLER_URI"))
        self.__path_certificate_pem = \
            os.environ['APP_PATH'] + '/config/' + parsed_environ.get("HTTP_APS_INSTANCE_ID") + '.pem'
        self.__path_certificate_apsc_pem = \
            os.environ['APP_PATH'] + '/config/' + parsed_environ.get("HTTP_APS_INSTANCE_ID") + '.apsc.pem'

        self.list_services = self.get_list_services()
        self.appmeta = self.get_appmeta(parsed_environ)

    def get_list_services(self):
        if os.path.isfile(os.environ['APP_PATH'] + Types.NAME_FILE_LIST_SERVICES):
            with open(os.environ['APP_PATH'] + Types.NAME_FILE_LIST_SERVICES) as inFile:
                application_services = json.loads(inFile.read(), object_pairs_hook=ordereddict.OrderedDict)
        else:
            application_services = self.__APS_API.GET(
                '/aps/2/application',
                None,
                None,
                self.__path_certificate_pem
            )
            with open(os.environ['APP_PATH'] + Types.NAME_FILE_LIST_SERVICES, 'wb') as outfile:
                outfile.write(json.dumps(application_services, indent=8))
        return application_services

    def get_appmeta(self, parsed_environ):
        if os.path.isfile(os.environ['APP_PATH'] + Types.NAME_FILE_APP_META):
            tree_appmeta = ET.parse(os.environ['APP_PATH'] + Types.NAME_FILE_APP_META)
        else:
            uri_appmeta = parsed_environ.get("BODY")["aps"]["package"]["href"] + '/APP-META.xml'
            tree_appmeta = self.__APS_API.GET(
                uri_appmeta,
                None,
                None,
                self.__path_certificate_pem,
                False
            )
            tree_appmeta.write(os.environ['APP_PATH'] + Types.NAME_FILE_APP_META)
        return tree_appmeta.getroot()

    def get_type(self, request_type):
        schema = self.__APS_API.GET(
                "/aps/2/types/?id=" + request_type,
                None,
                None,
                self.__path_certificate_pem
                )
        return schema
