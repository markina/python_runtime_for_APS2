import os

import aps2.apsapi

class Info:

    _REQUEST_METHOD = None
    _ENVIRON = None

    @staticmethod
    def REQUEST_METHOD():
        if Info._REQUEST_METHOD:
            return Info._REQUEST_METHOD
        else:
            raise AttributeError("REQUEST_METHOD is not set!")

    @staticmethod
    def ENVIRON():
        if Info._ENVIRON:
            return Info._ENVIRON
        else:
            raise AttributeError("ENVIRON is not set!")


    @staticmethod
    def set_information(environ):
        Info._REQUEST_METHOD = environ.get('REQUEST_METHOD', 0)
        Info._ENVIRON = environ
        Info._REQUEST_URI = environ.get('REQUEST_URI', 0)
        Info._SCRIPT_NAME = environ.get('SCRIPT_NAME', 0)
        Info._HTTP_APS_CONTROLLER_URI = environ.get('HTTP_APS_CONTROLLER_URI', 0)
        Info._HTTP_APS_INSTANCE_ID = environ.get('HTTP_APS_INSTANCE_ID', 0)
        Info._APS_API = aps2.apsapi.API(Info._HTTP_APS_CONTROLLER_URI)   # TODO find using aps2.apsapi.API.GET//
        Info._PATH_CERTIFICATE = os.environ['APP_PATH'] + '/config/' + str(Info._HTTP_APS_INSTANCE_ID) + '.pem'
        Info._PATH_INFO = environ.get('PATH_INFO', 0)
        Info._QUERY_STRING = environ.get("QUERY_STRING", 0)

        Info._CONTENT_LENGTH = Info.get_request_length()
        if Info._CONTENT_LENGTH != 0:
            self.body = environ['wsgi.input'].read(self.CONTENT_LENGTH)
            self.body_json = json.loads(self.body, object_pairs_hook=ordereddict.OrderedDict)
            logger.info("body_json = " + "...")

    @staticmethod
    def get_request_length():
        try:
            request_body_size = int(Info._ENVIRON.get('CONTENT_LENGTH', 0))
        except ValueError:
            request_body_size = 0
        return request_body_size
