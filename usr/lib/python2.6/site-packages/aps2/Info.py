import os
import simplejson as json
import ordereddict


class Info:
    # TODO Fix this class
    __REQUEST_METHOD = None
    __ENVIRON = None
    __REQUEST_URI = None
    __SCRIPT_NAME = None
    __HTTP_APS_CONTROLLER_URI = None
    __HTTP_APS_INSTANCE_ID = None
    __PATH_INFO = None
    __QUERY_STRING = None
    __CONTENT_LENGTH = None
    __BODY_JSON = None

    @staticmethod
    def delete():
        Info.__REQUEST_METHOD = None
        Info.__ENVIRON = None
        Info.__REQUEST_URI = None
        Info.__SCRIPT_NAME = None
        Info.__HTTP_APS_CONTROLLER_URI = None
        Info.__HTTP_APS_INSTANCE_ID = None
        Info.__PATH_INFO = None
        Info.__QUERY_STRING = None
        Info.__CONTENT_LENGTH = None
        Info.__BODY_JSON = None


    @staticmethod
    def get_REQUEST_METHOD():
        if Info.__REQUEST_METHOD:
            return Info.__REQUEST_METHOD
        else:
            raise AttributeError("REQUEST_METHOD is not set!")

    @staticmethod
    def get_ENVIRON():
        if Info.__ENVIRON:
            return Info.__ENVIRON
        else:
            raise AttributeError("ENVIRON is not set!")

    @staticmethod
    def get_REQUEST_URI():
        if Info.__REQUEST_URI:
            return Info.__REQUEST_URI
        else:
            raise AttributeError("REQUEST_URI is not set!")

    @staticmethod
    def get_SCRIPT_NAME():
        if Info.__SCRIPT_NAME:
            return Info.__SCRIPT_NAME
        else:
            raise AttributeError("SCRIPT_NAME is not set!")

    @staticmethod
    def get_HTTP_APS_CONTROLLER_URI():
        if Info.__HTTP_APS_CONTROLLER_URI:
            return Info.__HTTP_APS_CONTROLLER_URI
        else:
            raise AttributeError("HTTP_APS_CONTROLLER_URI is not set!")

    @staticmethod
    def get_HTTP_APS_INSTANCE_ID():
        if Info.__HTTP_APS_INSTANCE_ID:
            return Info.__HTTP_APS_INSTANCE_ID
        else:
            raise AttributeError("HTTP_APS_CONTROLLER_URI is not set!")

    @staticmethod
    def get_PATH_INFO():
        if Info.__PATH_INFO:
            return Info.__PATH_INFO
        else:
            raise AttributeError("PATH_INFO is not set!")

    @staticmethod
    def get_QUERY_STRING():
        if Info.__QUERY_STRING:
            return Info.__QUERY_STRING
        else:
            raise AttributeError("HTTP_APS_CONTROLLER_URI is not set!")

    @staticmethod
    def get_CONTENT_LENGTH():
        if Info.__CONTENT_LENGTH:
            return Info.__CONTENT_LENGTH
        else:
            raise AttributeError("CONTENT_LENGTH is not set!")

    @staticmethod
    def get_BODY_JSON():
        if Info.__BODY_JSON:
            return Info.__BODY_JSON
        else:
            raise AttributeError("BODY_JSON is not set!")

    @staticmethod
    def set_environ(environ):
        Info.__ENVIRON = environ
        Info.__REQUEST_METHOD = environ.get('REQUEST_METHOD', 0)
        Info.__REQUEST_URI = environ.get('REQUEST_URI', 0)
        Info.__SCRIPT_NAME = environ.get('SCRIPT_NAME', 0)
        Info.__HTTP_APS_CONTROLLER_URI = environ.get('HTTP_APS_CONTROLLER_URI', 0)
        Info.__HTTP_APS_INSTANCE_ID = environ.get('HTTP_APS_INSTANCE_ID', 0)
        Info.__PATH_INFO = environ.get('PATH_INFO', 0)
        Info.__QUERY_STRING = environ.get("QUERY_STRING", 0)

        Info.__CONTENT_LENGTH = Info.get_request_length()
        if Info.__CONTENT_LENGTH != 0:
            body = environ['wsgi.input'].read(Info.__CONTENT_LENGTH)
            Info.__BODY_JSON = json.loads(body, object_pairs_hook=ordereddict.OrderedDict)

    @staticmethod
    def get_request_length():
        try:
            request_body_size = int(Info.__ENVIRON.get('CONTENT_LENGTH', 0))
        except ValueError:
            request_body_size = 0
        return request_body_size
