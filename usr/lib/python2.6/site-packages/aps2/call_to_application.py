import json

import aps2.apsapi
import aps2.aps
import aps2.call_to_application

import aps2.uLogging

logger = aps2.uLogging.get_logger('/tmp/myapp.log', aps2.uLogging.DEBUG)


class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]


def call_unprovision(old_resource):
    logger.info('DELETE --> unprovision()')
    old_resource.unprovision()
    return ""


def call_provision(new_resource, properties, request_json):
    logger.info('POST --> provision()')
    properties_dictionary_new = {}

    for prop in properties:
        properties_dictionary_new[prop] = str(request_json[prop])

    new_resource.provision()

    for prop in properties:
        if properties_dictionary_new[prop] != getattr(new_resource, prop):
            break
    else:
        return ""
    for prop in properties:
        request_json[prop] = getattr(new_resource, prop)

    return json.dumps(request_json)


def call_retrieve(old_resource, properties, old_json):
    logger.info('GET --> retrieve()')

    old_resource.retrieve()

    logger.info("after retrieve: NEW = " + old_resource.cloudpass)
    logger.info("after retrieve: NEW = " + old_resource.cloudadmin)
    logger.info("after retrieve: NEW = " + old_resource.apphost)

    old_json = json.loads(str(old_json), object_hook=Struct)
    # TODO problem with using JsonNode: "Error: is not JSON serializable"
    # old_json = json.loads(str(old_json), object_hook=lambda x: aps2.apsapi.JsonNode(**x))

    for prop in properties:
        old_json[prop] = getattr(old_resource, prop)

    return json.dumps(old_json)


def call_configure(old_resource, new_resource, properties, request_json):
    logger.info('PUT --> configure()')
    properties_dictionary_new = {}

    for prop in properties:
        properties_dictionary_new[prop] = str(request_json[prop])

    old_resource.configure(new_resource)

    for prop in properties:
        if properties_dictionary_new[prop] != getattr(old_resource, prop):
            break
    else:
        return ""

    for prop in properties:
        request_json[prop] = getattr(old_resource, prop)

    return json.dumps(request_json)


def call_custom_function(old_resource, name_function):
    logger.info("FUNC --> " + name_function)

    method = getattr(old_resource, name_function)
    method("test", 11, 22)  # TODO

    return "ok"
