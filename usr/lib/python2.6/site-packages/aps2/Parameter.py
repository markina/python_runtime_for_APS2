import simplejson as json
import ordereddict
import urllib2
import re

import aps2.uLogging

logger = aps2.uLogging.get_logger('/tmp/myapp.log', aps2.uLogging.DEBUG)

STRING = "string"
INTEGER = "integer"
BOOLEAN = "boolean"
NUMBER = "number"


class Obj(object):
    pass


def str2bool(v):
    return v.lower() in ("true", "t", "1")


def get_obj_by_complex_type(value, type_param, current_structures):
    if type_param.count('#') == 1:
        re_match = re.compile("(?P<aps_type>.*)#(?P<name_structure>.*)").match(type_param)
        aps_type = re_match.group("aps_type")
        name_structure = re_match.group("name_structure")

        schema = aps2.InfoParse.InfoParse.get_aps_api().GET(
            "/aps/2/types/?id=" + aps_type,
            None,
            None,
            aps2.InfoParse.InfoParse.get_pem_path_certificate()
        )[0]
        current_structures = schema

    else:
        assert current_structures, "type isn't valid: " + type_param
        name_structure = type_param
        schema = current_structures

    properties = schema["structures"][name_structure]["properties"]

    aps2.printer.print_json("structure",  schema["structures"][name_structure])

    result = Obj()
    for prop in properties:
        logger.info("prop = " + prop)
        logger.info("type = " + schema["structures"][name_structure]["properties"][prop]["type"])
        setattr(result,
                prop,
                get_obj_by_type(
                    value[prop],
                    schema["structures"][name_structure]["properties"][prop]["type"],
                    current_structures)
                )

    return result


def get_obj_by_type(value, type_param, current_structures=None):
    if type_param == STRING:
        return urllib2.unquote(value)
    elif type_param == INTEGER:
        return int(value)
    elif type_param == BOOLEAN:
        return str2bool(value)
    elif type_param == NUMBER:
        return float(value)
    else:
        obj = get_obj_by_complex_type(value, type_param, current_structures)
        return obj


class Parameter:
    def __init__(self, name_parameter, value, json):
        self.name = name_parameter
        self.json = json
        self.value = get_obj_by_type(value, json["type"])

    def to_string(self):
        return "name = " + self.name + "\n" \
               + "value = " + str(self.value) + " === " + str(type(self.value)) + "\n" \
               + "json = \n" + json.dumps(self.json, indent=8) + "\n"

    def to_string_without_json(self):
        return "name = " + self.name + "\n" \
               + "value = " + str(self.value) + " === " + str(type(self.value)) + "\n"


