import simplejson as json
import ordereddict
import urllib2
import re

import aps2.uLogging

logger = aps2.uLogging.get_logger('/tmp/myapp.log', aps2.uLogging.DEBUG)

STRING = "string"
INTEGER = "integer"
BOOLEAN = "boolean"
NUMBER = "number"


def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")


def get_obj_by_complex_type(type_param):

    assert type_param.count('#') == 1, "Count of '#' not eq 1 in type: " + type_param

    re_match = re.compile("(?P<aps_type>.*)#(?P<name_structure>.*)").match(type_param)
    aps_type = re_match.group("aps_type")
    name_structure = re_match.group("name_structure")

    schema = aps2.InfoParse.InfoParse.get_aps_api().GET(
        "/aps/2/types/?id=" + aps_type,
        None,
        None,
        aps2.InfoParse.InfoParse.get_pem_path_certificate()
    )[0]

    properties = schema["structures"][name_structure]["properties"]
    for prop in properties:
        logger.info("prop = " + prop)
        logger.info("type = " + schema["structures"][name_structure]["properties"][prop]["type"])

    # TODO parse structures

    return ":)"


def get_obj_by_type(value, type_param):
    if type_param == STRING:
        return urllib2.unquote(value)
    elif type_param == INTEGER:
        return int(value)
    elif type_param == BOOLEAN:
        return str2bool(value)
    elif type_param == NUMBER:
        return float(value)
    else:
        logger.info("It's not simple type! ")
        logger.info("type_param = " + type_param)

        return get_obj_by_complex_type(type_param)


class Parameter:
    def __init__(self, name_parameter, value, json):
        self.name = name_parameter
        self.json = json
        self.value = get_obj_by_type(value, json["type"])

    def to_string(self):
        return "name = " + self.name + "\n" \
               + "value = " + str(self.value) + " ===" + str(type(self.value)) + "\n" \
               + "json = \n" + json.dumps(self.json, indent=8) + "\n"

    def to_string_without_json(self):
        return "name = " + self.name + "\n" \
               + "value = " + str(self.value) + " ===" + str(type(self.value)) + "\n"


