import os
import re

import aps2.apsapi

import simplejson as json
import ordereddict


NF_LIST_SERVICES = 'list_services.json'
SUFFIX_NF_SCHEMA = '.schema'

logger = aps2.uLogging.get_logger('/tmp/myapp.log', aps2.uLogging.DEBUG)


def get_request_length(environ):
    try:
        request_body_size = int(environ.get('CONTENT_LENGTH', 0))
    except ValueError:
        request_body_size = 0
    return request_body_size


def get_application_services(hpr):
    # 'get_application_services' get json from 'list_services.json'
    # or from APS_API
    # it's information about services. For example:
    # "aps": {
    #         "endpoint": "https://endpoint.a.apscloudstest.apsdemo.org:443/endpoint000/",
    #         "id": "022183f5-0945-4465-952b-95ef4e92ac8b",
    #         "type": "http://aps-standard.org/samples/starter"
    # },
    # "clouds": {
    #         "name": "VPS cloud globals",
    #         "schema": "/aps/2/types/90",
    #         "summary": "VPS cloud application global service",
    #         "type": "http://aps-standard.org/samples/starter/cloud/1.0"
    # },
    # "contexts": {
    #         "name": "VPS Management",
    #         "schema": "/aps/2/types/91",
    #         "summary": "VPS management environment",
    #         "type": "http://aps-standard.org/samples/starter/context/1.0"
    # }
    # logger.info("get_get_application_services:")
    if os.path.isfile(os.environ['APP_PATH'] + NF_LIST_SERVICES):
        # logger.info("list_services.json EXIST!")
        with open(os.environ['APP_PATH'] + NF_LIST_SERVICES) as inFile:
            application_services = json.loads(inFile.read(), object_pairs_hook=ordereddict.OrderedDict)
    else:
        # logger.info("list_services.json NOT exist!")
        application_services = hpr.APS_API.GET('/aps/2/application', None, None, hpr.PATH_CERTIFICATE)
        with open(os.environ['APP_PATH'] + NF_LIST_SERVICES, 'wb') as outfile:
            outfile.write(json.dumps(application_services, indent=8))
    # logger.info("application_services:")
    # logger.info(json.dumps(application_services, indent=8))
    return application_services


class ServiceId:
    # For example:
    # self.main_name = clouds
    # self.json = {
    #         "type": "http://aps-standard.org/samples/starter/cloud/1.0",
    #         "name": "VPS cloud globals",
    #         "summary": "VPS cloud application global service",
    #         "schema": "/aps/2/types/90"
    # }
    def __init__(self):
        self.main_name = None
        self.json = None


def get_service_id(hpr):
    # 'get_service_id' get current_service_id by PATH_INFO
    # For example:
    # /clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/createCounter/pathparam1
    # =>
    # ServiceId(main_name=clouds, json=...)
    # logger.info("PATH_INFO:")
    # logger.info(hpr.PATH_INFO)
    service_id = None
    for item in hpr.application_services:
        # logger.info("item = " + item)
        pattern = re.compile('/' + item)
        if pattern.match(hpr.PATH_INFO):
            service_id = ServiceId()
            service_id.json = hpr.application_services[item]
            service_id.main_name = item
            break

    if service_id is None:
        raise Exception("Error: service_id in PATH_INFO not exist!")
    # logger.info("service_id :")
    # logger.info("main_name = " + service_id.main_name)
    # logger.info("json = " + json.dumps(service_id.json, indent=8))
    return service_id


def get_aps_id(hpr):
    # For example:
    # /clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/createCounter/pathparam1
    # =>
    # "0f9b79e1-de01-4af6-9ff6-ccc589b11978"
    len_service_id = len('/' + hpr.service_id.main_name + '/')
    if len_service_id > len(hpr.PATH_INFO):
        # logger.info("length /service_id/ > len(hpr.PATH_INFO)")
        # logger.info("=> PATH_INFO not consist aps_id")
        return None
    string_without_service_id = hpr.PATH_INFO[len_service_id:]
    # logger.info("string_without_service_id = " + string_without_service_id)
    pattern = re.compile('[\w-]{36}')
    if pattern.match(string_without_service_id):
        aps_id = string_without_service_id[:36]
        # logger.info("aps_id = " + aps_id)
        return aps_id
    return None


def get_func(hpr):
    # For example:
    # /clouds/0f9b79e1-de01-4af6-9ff6-ccc589b11978/createCounter/pathparam1
    # =>
    # "/createCounter/pathparam1"
    if hpr.aps_id:
        len_service_id_aps_id = len('/' + hpr.service_id.main_name + '/' + hpr.aps_id)
        func = hpr.PATH_INFO[len_service_id_aps_id:]
    else:
        len_service_id = len('/' + hpr.service_id.main_name + '/')
        func = hpr.PATH_INFO[len_service_id:]
    return func


def get_schema(hpr):
    # 'get_schema' get json from 'same_name.schema'
    # or from APS_API
    # it's full information about service. For example:
    # {
    # "aps": {
    #         "href": "https://apsc.aps-standard.org/types/90",
    #         "id": "90"
    # },
    # "apsVersion": "2.0",
    # "id": "http://aps-standard.org/samples/starter/cloud/1.0",
    # "implements": [
    #         "http://aps-standard.org/types/core/application/1.0"
    # ],
    # "name": "cloud",
    # "operations": {
    #         "calculateSomething": {
    #                 "parameters": {
    #                         "paramA": {
    #                                 "kind": "query",
    #                                 "type": "integer"
    #                         }
    #                 },
    #                 "path": "/calculateSomething/{paramX}",
    #                 "response": {
    #                         "type": "string"
    #                 },
    #                 "verb": "GET"
    #         }
    # }
    dir_schemas = os.environ['APP_PATH'] + 'schemas/'
    if not os.path.exists(dir_schemas):
        os.makedirs(dir_schemas)
    nf_schema = hpr.service_id.main_name + SUFFIX_NF_SCHEMA
    if os.path.isfile(dir_schemas + nf_schema):
        # logger.info(nf_schema + " EXIST!")
        with open(dir_schemas + nf_schema) as infile:
            schema = json.loads(infile.read(), object_pairs_hook=ordereddict.OrderedDict)
    else:
        # logger.info(nf_schema + " NOT exist!")
        schema = hpr.APS_API.GET("/aps/2/types/?id=" + hpr.service_id.type, None, None, hpr.PATH_CERTIFICATE)
        with open(dir_schemas + nf_schema, 'wb') as outfile:
            outfile.write('%s' % schema)
    return schema[0]


class Helper:
    def __init__(self):
        pass

    def __getattr__(self, attr):
        try:
            return self.arrt
        except AttributeError:
            raise AttributeError("AttributeError: %r is not set!" % attr)

    def put_environ(self, environ):
        self.REQUEST_METHOD = environ.get('REQUEST_METHOD', 0)
        self.REQUEST_URI = environ.get('REQUEST_URI', 0)
        self.SCRIPT_NAME = environ.get('SCRIPT_NAME', 0)
        self.HTTP_APS_CONTROLLER_URI = environ.get('HTTP_APS_CONTROLLER_URI', 0)
        self.HTTP_APS_INSTANCE_ID = environ.get('HTTP_APS_INSTANCE_ID', 0)
        self.APS_API = aps2.apsapi.API(self.HTTP_APS_CONTROLLER_URI)
        self.PATH_CERTIFICATE = os.environ['APP_PATH'] + '/config/' + str(self.HTTP_APS_INSTANCE_ID) + '.pem'
        self.PATH_INFO = environ.get('PATH_INFO', 0)
        self.QUERY_STRING = environ.get("QUERY_STRING", 0)

        self.environ = environ
        self.CONTENT_LENGTH = get_request_length(environ)
        if self.CONTENT_LENGTH != 0:
            self.body = environ['wsgi.input'].read(self.CONTENT_LENGTH)
            self.body_json = json.loads(self.body, object_pairs_hook=ordereddict.OrderedDict)

        self.application_services = get_application_services(self)
        self.service_id = get_service_id(self)

        self.aps_id = get_aps_id(self)
        self.func = get_func(self)
        self.schema = get_schema(self)





