import os

import aps2.apsapi

import simplejson as json
import ordereddict

#
# class Struct(dict):
#     def __getattr__(self, name):
#         return self[name]
#
#     def __setattr__(self, name, value):
#         self[name] = value
#
#     def __delattr__(self, name):
#         del self[name]


def get_request_length(environ):
    try:
        request_body_size = int(environ.get('CONTENT_LENGTH', 0))
    except ValueError:
        request_body_size = 0
    return request_body_size


class Helper:

    def __init__(self):
        pass

    def __getattr__(self, attr):
        try:
            return self.arrt
        except AttributeError:
            raise AttributeError("AttributeError: %r is not set!" % attr)

    def put_environ(self, environ):
        self.REQUEST_METHOD = environ.get('REQUEST_METHOD', 0)
        self.REQUEST_URI = environ.get('REQUEST_URI', 0)
        self.SCRIPT_NAME = environ.get('SCRIPT_NAME', 0)
        self.HTTP_APS_CONTROLLER_URI = environ.get('HTTP_APS_CONTROLLER_URI', 0)
        self.HTTP_APS_INSTANCE_ID = environ.get('HTTP_APS_INSTANCE_ID', 0)
        self.APS_API = aps2.apsapi.API(self.HTTP_APS_CONTROLLER_URI)
        self.PATH_CERTIFICATE = os.environ['APP_PATH'] + '/config/' + str(self.HTTP_APS_INSTANCE_ID) + '.pem'
        self.PATH_INFO = environ.get('PATH_INFO', 0)
        self.QUERY_STRING = environ.get("QUERY_STRING", 0)

        self.environ = environ
        self.CONTENT_LENGTH = get_request_length(environ)
        if self.CONTENT_LENGTH != 0:
            self.body = environ['wsgi.input'].read(self.CONTENT_LENGTH)
            self.body_json = json.loads(self.body, object_pairs_hook=ordereddict.OrderedDict)

