import os

import aps2.parsing
import aps2.service
import aps2.utils
import aps2.parameter

import aps2.printer
import aps2.function

import aps2.uLogging
import aps2.client
import aps2.utils

os.environ['APP_PATH'] = '/usr/local/share/applications/pycloud/'


def application(environ, start_response):
    """
    Application is main function.
    :param environ contains all information
    :param start_response: for response (ex. 500 Error, 204 Ok, 200 Ok)
    :return: [ str ]
    """

    try:
        aps2.uLogging.basic_config('/tmp/myapp.log', aps2.uLogging.TRACE)
        aps2.uLogging.info("######################_BEGIN_######################")

        parsed_environ = aps2.parsing.ParsedEnviron(environ)

        # aps2.printer.print_environment(parsed_environ)
        # aps2.printer.print_request_body(parsed_environ)

        controller_client = aps2.client.ControllerClient(parsed_environ)

        aps2.utils.save_certificate_if_necessary(parsed_environ, controller_client)

        service_description = aps2.service.Service(controller_client, parsed_environ)
        function_description = aps2.utils.get_function_description(parsed_environ, service_description)

        function_caller = aps2.function.FunctionCaller(
            parsed_environ,
            controller_client,
            service_description,
            function_description
        )
        function_arguments = aps2.parameter.get_arguments(function_description, parsed_environ)
        num_response, type_response, function_result = function_caller.call(
            parsed_environ,
            (argument.value for argument in function_arguments)
        )

        start_response(num_response, type_response)
        aps2.uLogging.info("######################_END_######################")

        return [function_result]
    except Exception as e:
        aps2.uLogging.error("Error: " + str(e))
        start_response('500 Internal Error', [('Content-type', 'text/plain')])
        return ["Error: " + str(e)]

