import logging
import pprint
import os
import json
import sys
import re

# sys.path.append('/var/www/html/pycloud/')
import aps2.apsapi
import aps2.aps
import aps2.uLogging


# os.environ['APP_PATH'] = '/var/www/html/pycloud/'


class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]

def get_request_length(environ):
    try:
        request_body_size = int(environ.get('CONTENT_LENGTH', 0))
    except (ValueError):
        request_body_size = 0
    return request_body_size


def save_certificate(environ, request_body, logger):
    if environ.get('REQUEST_METHOD', 0) == 'POST':
        json_obj = json.loads(request_body, object_hook=Struct)
        self = json_obj.aps.x509.self
        controller = json_obj.aps.x509.controller
        HTTP_APS_INSTANCE_ID = environ.get('HTTP_APS_INSTANCE_ID', 0)
        if (not HTTP_APS_INSTANCE_ID):
            raise Exception("APS Instance ID header is not set!")
        logger.info("HTTP_APS_INSTANCE_ID: %d" % HTTP_APS_INSTANCE_ID)
        f = open(os.environ['APP_PATH'] + 'config/' + HTTP_APS_INSTANCE_ID + '.pem', 'w')
        f.write(self)
        f.close()
        f = open(os.environ['APP_PATH'] + 'config/' + HTTP_APS_INSTANCE_ID + '.apsc.pem', 'w')
        f.write(controller)
        f.close()


def call_configure(old_resource, new_resource, properties, request_json, logger):
    logger.info('PUT')
    logger.info('configure()')
    properties_dictionary_new = {}

    for prop in properties:
        properties_dictionary_new[prop] = str(request_json[prop])

    old_resource.configure(new_resource)

    for prop in properties:
        if properties_dictionary_new[prop] != getattr(old_resource, prop):
            break
    else:
        return ""

    for prop in properties:
        request_json[prop] = getattr(old_resource, prop)
        logger.info("CALL CONFIGURE: " + prop + " = " + getattr(old_resource, prop))

    return json.dumps(request_json)


def call_provision(new_resource, properties, request_json, logger):
    logger.info('POST')
    logger.info('provision()')
    properties_dictionary_new = {}

    for prop in properties:
        properties_dictionary_new[prop] = str(request_json[prop])

    new_resource.provision()

    for prop in properties:
        if properties_dictionary_new[prop] != getattr(new_resource, prop):
            break
    else:
        return ""

    for prop in properties:
        request_json[prop] = getattr(new_resource, prop)
        logger.info("CALL PROVISION: " + prop + " = " + getattr(new_resource, prop))
    
    return json.dumps(request_json)


def call_unprovosion(old_resource, logger):
    logger.info('DELETE')
    logger.info('unprovision()')
    old_resource.unprovision()
    return ""


def call_retrieve(old_resource, properties, old_json, logger):
    logger.info('GET')
    logger.info('retrieve()')

    old_resource.retrieve()

    logger.info("NEW = " + old_resource.cloudpass)
    logger.info("NEW = " + old_resource.cloudadmin)
    logger.info("NEW = " + old_resource.apphost)

    old_json = json.loads(str(old_json), object_hook=Struct)
    logger.info("OLD_JSON ==== " + str(old_json))
    for prop in properties:
        old_json[prop] = getattr(old_resource, prop)
        logger.info("CALL RETRIEVE: " + prop + " = " + getattr(old_resource, prop))
    logger.info("OLD JSON ==== " + str(old_json))    
    return json.dumps(old_json)


def call_method(environ, logger):
    request_size = get_request_length(environ)
    request_body = environ['wsgi.input'].read(request_size)
    #logger.info('REQUEST ENVIRONMENT:')
    #logger.info(pprint.pformat(environ))
    #if request_size:
    #    logger.info('REQUEST BODY:')
    #    logger.info(request_body)
    METHOD = environ.get('REQUEST_METHOD', 0)
    
    if METHOD == 'POST':
       save_certificate(environ, request_body, logger)
   
    HTTP_APS_CONTROLLER_URI = environ.get('HTTP_APS_CONTROLLER_URI', 0)
    HTTP_APS_INSTANCE_ID = environ.get('HTTP_APS_INSTANCE_ID', 0)

    logger.info(" HTTP_APS_INSTANCE_ID  = " + str( HTTP_APS_INSTANCE_ID )) 
    logger.info(" HTTP_APS_CONTROLLER_URI  = " + str( HTTP_APS_CONTROLLER_URI )) 

    if (not HTTP_APS_CONTROLLER_URI):
        raise Exception("APS-Controller-URI header is not set")

    PATH_CERTIFICATE = os.environ['APP_PATH'] + '/config/' + str(HTTP_APS_INSTANCE_ID) + '.pem';
    REQUEST_URI = environ.get('REQUEST_URI', 0)
    SCRIPT_NAME = environ.get('SCRIPT_NAME', 0)

    #logger.info("REQUEST_URI = " + REQUEST_URI)
    #logger.info("SCRIPT_NAME = " + SCRIPT_NAME)

    service_id = REQUEST_URI[len(SCRIPT_NAME)+1:]
    
    if '/' in service_id:
        service_id = service_id[:service_id.find('/')]
    #logger.info("service_id = " + service_id)

    aps_api = aps2.apsapi.API(HTTP_APS_CONTROLLER_URI)

    if METHOD == "POST" or METHOD == "PUT":
        request_json = json.loads(request_body, object_hook=Struct)
        aps_id = request_json.aps.id
    else:
        aps_id = REQUEST_URI[len(SCRIPT_NAME)+1:]
        aps_id = aps_id[aps_id.find('/')+1:]
 
    #logger.info("aps_id = " + aps_id)
    old_json = aps_api.GET("/aps/2/resources/" + aps_id, None, None, PATH_CERTIFICATE)
    #logger.info("OLD JSON = " + str(old_json))
    
    #logger.info("old_json.aps.type = " + old_json.aps.type)
    schema = aps_api.GET("/aps/2/types/?id=" + old_json.aps.type, None, None, PATH_CERTIFICATE)
    
    class_name = schema[0].name
    #logger.info("class_name = " + schema[0].name)
   
    #logger.info("old_json.aps.package.href = " +  old_json.aps.package.href)
    uri_appmeta = old_json.aps.package.href + '/APP-META.xml'
    tree_appmeta = aps_api.GET(uri_appmeta, None, None, PATH_CERTIFICATE, False)
    
    appmeta_namespace = re.search('\{(.*)\}', tree_appmeta.tag).group(1)
    #logger.info("app_namespace = " + appmeta_namespace)
    
    services = tree_appmeta.findall(".//{" + appmeta_namespace + "}service")

    script_path = ""
    for service in services:
        if service.get('id') == service_id:
            script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')
            script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
            break

    #logger.info("script_path = " + script_path)
    import_script = __import__(script_path)
    constructor = getattr(import_script, class_name)        

    properties = []
    json_properties = json.loads(str(schema[0].properties))
    for prop in json_properties.items():
        properties.append(str(prop[0]))

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)
   
    if METHOD == "PUT" or METHOD == "POST":
        new_resource = constructor()
        for prop in properties:
            setattr(new_resource, prop, request_json[prop])

        logger.info("NEW = " + new_resource.apphost)
        logger.info("NEW = " + new_resource.cloudpass)
        logger.info("NEW = " + new_resource.cloudadmin)
        
    if METHOD == "PUT":
        result = call_configure(old_resource, new_resource, properties, request_json, logger)
    elif METHOD == "POST":
        result = call_provision(new_resource, properties, request_json, logger)
    elif METHOD == "GET":
        result = call_retrieve(old_resource, properties, old_json, logger)
    elif METHOD == "DELETE":
        result = call_unprovosion(old_resource, logger)

    return result


def application(environ, start_response):
    
    METHOD = environ.get('REQUEST_METHOD', 0)

    logger = uLogging.get_logger('/tmp/myapp.log', logging.DEBUG)
    logger.info("----------------------------------------------------")
   
    result = ''
    try:
       result = call_method(environ, logger)
    except Exception as e:
       start_response('500 Internal Error', [('Content-type', 'text/plain')])
       return ["Error: "+str(e)]
        
    if METHOD == "DELETE":
        start_response('204 OK', [('Content-type', 'text/plain')])
    else :
        start_response('200 OK', [('Content-type', 'text/plain')])
    
    return [result]

