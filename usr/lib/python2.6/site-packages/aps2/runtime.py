import pprint
import os
import json
import sys
import re

import aps2.apsapi
import aps2.aps

import aps2.uLogging

os.environ['APP_PATH'] = '/usr/local/share/applications/pycloud/'

class Struct(dict):
    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

    def __delattr__(self, name):
        del self[name]


def get_request_length(environ):
    try:
        request_body_size = int(environ.get('CONTENT_LENGTH', 0))
    except (ValueError):
        request_body_size = 0
    return request_body_size

# save_certificate call from call_method_post
# Sava certificate from request_json for using PUT GET DELETE 
def save_certificate(environ, request_json):
    self = request_json.aps.x509.self
    controller = request_json.aps.x509.controller
    if (not HTTP_APS_INSTANCE_ID):
        raise Exception("APS Instance ID header is not set!")
    #logger.info("HTTP_APS_INSTANCE_ID: " + HTTP_APS_INSTANCE_ID)
        
    try:
        dirconfig = os.environ['APP_PATH'] +'config/'
        if not os.path.exists(dirconfig):
            os.makedirs(dirconfig)
        f = open(os.environ['APP_PATH'] + 'config/' + HTTP_APS_INSTANCE_ID + '.pem', 'w')
        f.write(self)
        f.close()
        f = open(os.environ['APP_PATH'] + 'config/' + HTTP_APS_INSTANCE_ID + '.apsc.pem', 'w')
        f.write(controller)
        f.close()
    except OSError:
        logger.info("Cannot make directory 'config/'")
    except IOError:
        logger.info("Certificate cannot open")


def call_configure(old_resource, new_resource, properties, request_json):
    logger.info('PUT')
    logger.info('configure()')
    properties_dictionary_new = {}

    for prop in properties:
        properties_dictionary_new[prop] = str(request_json[prop])

    old_resource.configure(new_resource)

    for prop in properties:
        if properties_dictionary_new[prop] != getattr(old_resource, prop):
            break
    else:
        return ""

    for prop in properties:
        request_json[prop] = getattr(old_resource, prop)

    return json.dumps(request_json)


def call_provision(new_resource, properties, request_json):
    logger.info('POST')
    logger.info('provision()')
    properties_dictionary_new = {}

    for prop in properties:
        properties_dictionary_new[prop] = str(request_json[prop])

    new_resource.provision()

    for prop in properties:
        if properties_dictionary_new[prop] != getattr(new_resource, prop):
            break
    else:
        return ""
    for prop in properties:
        request_json[prop] = getattr(new_resource, prop)
    
    return json.dumps(request_json)


def call_unprovosion(old_resource):
    logger.info('DELETE')
    logger.info('unprovision()')
    old_resource.unprovision()
    return ""


def call_retrieve(old_resource, properties, old_json):
    logger.info('GET')
    logger.info('retrieve()')

    old_resource.retrieve()

    logger.info("after retrieve: NEW = " + old_resource.cloudpass)
    logger.info("after retrieve: NEW = " + old_resource.cloudadmin)
    logger.info("after retrieve: NEW = " + old_resource.apphost)

    old_json = json.loads(str(old_json), object_hook=Struct)
    for prop in properties:
        old_json[prop] = getattr(old_resource, prop)

    return json.dumps(old_json)

# get_information create global propertie for using
def get_information(environ):
    global METHOD
    METHOD = environ.get('REQUEST_METHOD', 0)
    
    global REQUEST_URI
    REQUEST_URI = environ.get('REQUEST_URI', 0)
    
    global SCRIPT_NAME
    SCRIPT_NAME = environ.get('SCRIPT_NAME', 0)
    
    global HTTP_APS_CONTROLLER_URI
    HTTP_APS_CONTROLLER_URI = environ.get('HTTP_APS_CONTROLLER_URI', 0)
    if (not HTTP_APS_CONTROLLER_URI):
        raise Exception("APS-Controller-URI header is not set")

    global HTTP_APS_INSTANCE_ID
    HTTP_APS_INSTANCE_ID = environ.get('HTTP_APS_INSTANCE_ID', 0)

    #logger = aps2.uLogging2.getLogger('/tmp/myapp.log', aps2.uLogging2.TRACE)
    #logger.info("!!!")
    #logger.debug("debug!!!")
    #logger.trace("trace!!!")
    #logger.setLogFile('/tmp/myappseconf.log')
    #logger.trace("trace ok")
    global logger
    logger = aps2.uLogging.getLogger('/tmp/myapp.log', aps2.uLogging.DEBUG)
    
    global APS_API
    APS_API = aps2.apsapi.API(HTTP_APS_CONTROLLER_URI)

    global PATH_CERTIFICATE
    PATH_CERTIFICATE = os.environ['APP_PATH'] + '/config/' + str(HTTP_APS_INSTANCE_ID) + '.pem';


def get_constructor(schema, json):
    class_name = schema[0].name
   
    uri_appmeta = json.aps.package.href + '/APP-META.xml'
    tree_appmeta = APS_API.GET(uri_appmeta, None, None, PATH_CERTIFICATE, False)
    
    appmeta_namespace = re.search('\{(.*)\}', tree_appmeta.tag).group(1)
    services = tree_appmeta.findall(".//{" + appmeta_namespace + "}service")

    service_id = REQUEST_URI[len(SCRIPT_NAME)+1:]
    if '/' in service_id:
        service_id = service_id[:service_id.find('/')]
    
    script_path = ""
    for service in services:
        if service.get('id') == service_id:
            script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')
            script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
            break

    logger.info("class_name = " + class_name)
    logger.info('script_path = '+ script_path)


    import_script = __import__(script_path)
    constructor = getattr(import_script, class_name)       
    
    return constructor



# call_method_post work post request:
#
# 1. Get request_json (info about host_name, admin_name ... , aps.type, aps.package.href
# You can see request_json with :
#   if request_size:
#       logger.info('REQUEST BODY:')
#       logger.info(request_body)
# 2. Save certificate
# 3. Get schema for info abput scripts (ex. class_name, properties define in scripts)
# see. clouds.schema.gen 
# 5. Create new_resource and fill properties from arrave json (request_json) 
# 6. Send new_resource with properties call_provision
# 7. Return new json with properties after provision()   
def call_method_post(environ):
    
    request_size = get_request_length(environ)
    request_body = environ['wsgi.input'].read(request_size)
    request_json = json.loads(request_body, object_hook=Struct)
    
    #logger.info(request_body)
    save_certificate(environ, request_json)
    
    schema = APS_API.GET("/aps/2/types/?id=" + request_json.aps.type, None, None, PATH_CERTIFICATE)
    
    logger.info("ok")
    constructor = get_constructor(schema, request_json)
    properties = get_properties(schema)


    new_resource = constructor()
    for prop in properties:
        setattr(new_resource, prop, request_json[prop])

    logger.info("NEW = " + new_resource.apphost)
    logger.info("NEW = " + new_resource.cloudpass)
    logger.info("NEW = " + new_resource.cloudadmin)
        
    result = call_provision(new_resource, properties, request_json)

    return result

def get_properties(schema):
    properties = []
    json_properties = json.loads(str(schema[0].properties))
    for prop in json_properties.items():
        properties.append(str(prop[0]))
    return properties

# call_method_delere post request:
#
# 1. Get old_json   
# 3. Get schema for info abput scripts (ex. class_name, properties define in scripts)
# see. clouds.schema.gen 
# 5. Create old_resource and fill properties from arrave json (old_json) 
# 6. Send old_resource with properties call_unprovosion
# 7. Return new json with properties after unprovision()   
def call_method_delete(environ):
    aps_id = REQUEST_URI[len(SCRIPT_NAME)+1:]
    aps_id = aps_id[aps_id.find('/')+1:]
 
    old_json = APS_API.GET("/aps/2/resources/" + aps_id, None, None, PATH_CERTIFICATE)
    schema = APS_API.GET("/aps/2/types/?id=" + old_json.aps.type, None, None, PATH_CERTIFICATE)
    
    constructor = get_constructor(schema, old_json)
    properties = get_properties(schema)

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)
   
    result = call_unprovosion(old_resource)

    return result

#see post
def call_method_get(environ):
    aps_id = REQUEST_URI[len(SCRIPT_NAME)+1:]
    aps_id = aps_id[aps_id.find('/')+1:]
 
    old_json = APS_API.GET("/aps/2/resources/" + aps_id, None, None, PATH_CERTIFICATE)
    schema = APS_API.GET("/aps/2/types/?id=" + old_json.aps.type, None, None, PATH_CERTIFICATE)
    
    constructor = get_constructor(schema, old_json)
    properties = get_properties(schema)

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)
   
    result = call_retrieve(old_resource, properties, old_json)

    return result

#see post
def call_method_put(environ):
    request_size = get_request_length(environ)
    request_body = environ['wsgi.input'].read(request_size)
    request_json = json.loads(request_body, object_hook=Struct)
    
    aps_id = request_json.aps.id
 
    old_json = APS_API.GET("/aps/2/resources/" + aps_id, None, None, PATH_CERTIFICATE)
    schema = APS_API.GET("/aps/2/types/?id=" + old_json.aps.type, None, None, PATH_CERTIFICATE)
   
    constructor = get_constructor(schema, old_json)
    properties = get_properties(schema)

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)
   
    new_resource = constructor()
    for prop in properties:
        setattr(new_resource, prop, request_json[prop])
    logger.info("NEW = " + new_resource.apphost)
    logger.info("NEW = " + new_resource.cloudpass)
    logger.info("NEW = " + new_resource.cloudadmin)
        
    result = call_configure(old_resource, new_resource, properties, request_json)

    return result



# application is main function
# environ is all info. You can see info with:
#    logger.info('REQUEST ENVIRONMENT:')
#    logger.info(pprint.pformat(environ))
# 
# start_response for response (ex. 500 Error, 204 Ok, 200 Ok)
def application(environ, start_response):

    get_information(environ)    
    
    #logger.info('REQUEST ENVIRONMENT:')
    #logger.info(pprint.pformat(environ))
    
    #request_size = get_request_length(environ)
    #request_body = environ['wsgi.input'].read(request_size)
    
    #if request_size:
     #   logger.info('REQUEST BODY:')
     #   request_body = environ['wsgi.input'].read(request_size)
     #   logger.info(request_body)
    
    logger.info("----------------------------------------------------")
   
    result = ''
    try:
        if METHOD == 'POST':
            result = call_method_post(environ)
        elif METHOD == 'DELETE':
            result = call_method_delete(environ)
        elif METHOD == 'GET':
            result = call_method_get(environ)
        elif METHOD == 'PUT':
            result = call_method_put(environ)
    except Exception as e:
       start_response('500 Internal Error', [('Content-type', 'text/plain')])
       return ["Error: "+str(e)]
        
    if METHOD == "DELETE":
        start_response('204 OK', [('Content-type', 'text/plain')])
    else :
        start_response('200 OK', [('Content-type', 'text/plain')])
    
    return [result]

