import pprint
import os
import re


import aps2.call_to_application
import aps2.printer

import aps2.Types
import aps2.ServiceId
import aps2.Info
import aps2.InfoParse
import aps2.Deleter
import aps2.CustomFunction
import aps2.uLogging

from apsapi import logger  # TODO

os.environ['APP_PATH'] = '/usr/local/share/applications/pycloud/'


def get_constructor():
    class_name = aps2.ServiceId.ServiceId.get_schema_json()["name"]

    tree_appmeta = aps2.Types.Types.get_appmeta_et_root()

    appmeta_namespace = re.search('\{(.*)\}', tree_appmeta.tag).group(1)
    services = tree_appmeta.findall(".//{" + appmeta_namespace + "}service")

    script_path = ""
    for service in services:
        if service.get('id') == aps2.ServiceId.ServiceId.get_name_service_id():
            script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')  # TODO
            script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
            break

    import_script = __import__(script_path)
    constructor = getattr(import_script, class_name)

    return constructor


def call_method_post():
    """
    Get request BODY_JSON
    Save certificates
    Create new_resource
    Call provision
    :return: json or ""
    """
    aps2.printer.print_environment(aps2.Info.Info.get_ENVIRON())
    aps2.printer.print_request_body(aps2.Info.Info.get_BODY_JSON())
    aps2.Types.Types.save_certificate()

    constructor = get_constructor()
    properties = get_properties(aps2.ServiceId.ServiceId.get_schema_json())

    new_resource = constructor()
    for prop in properties:
        setattr(new_resource, prop, aps2.Info.Info.get_BODY_JSON()[prop])

    logger.info("NEW = " + new_resource.apphost)
    logger.info("NEW = " + new_resource.cloudpass)
    logger.info("NEW = " + new_resource.cloudadmin)

    result = aps2.call_to_application.call_provision(new_resource, properties, aps2.Info.Info.get_BODY_JSON())
    return result


def get_properties(schema):
    properties = []
    json_properties = schema["properties"]
    for prop in json_properties.items():
        # logger.info("1 = " + str(prop[0]))
        properties.append(str(prop[0]))
    return properties


def call_method_delete():
    """
    Get old_json
    Get old_resource
    Call unprovision
    TODO delete certificates
    :return: json or ""
    """

    old_resource = aps2.ServiceId.ServiceId.get_resource_with_old_info()
    result = aps2.call_to_application.call_unprovision(old_resource)

    return result


# see post
def call_method_get():
    old_json = aps2.InfoParse.InfoParse.get_aps_api().GET(
        "/aps/2/resources/" + aps2.InfoParse.InfoParse.get_aps_id(),
        None,
        None,
        aps2.InfoParse.InfoParse.get_pem_path_certificate()
    )

    constructor = get_constructor()
    properties = get_properties(aps2.ServiceId.ServiceId.get_schema_json())

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)

    result = aps2.call_to_application.call_retrieve(old_resource, properties, old_json)

    return result


def call_method_put():
    old_json = aps2.InfoParse.InfoParse.get_aps_api().GET(
        "/aps/2/resources/" + aps2.InfoParse.InfoParse.get_aps_id(),
        None,
        None,
        aps2.InfoParse.InfoParse.get_pem_path_certificate()
    )

    constructor = get_constructor()
    properties = get_properties(aps2.ServiceId.ServiceId.get_schema_json())

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)

    new_resource = constructor()
    for prop in properties:
        setattr(new_resource, prop, aps2.Info.Info.get_BODY_JSON()[prop])
    logger.info("NEW = " + new_resource.apphost)
    logger.info("NEW = " + new_resource.cloudpass)
    logger.info("NEW = " + new_resource.cloudadmin)

    result = aps2.call_to_application.call_configure(old_resource, new_resource, properties, aps2.Info.Info.get_BODY_JSON())

    return result


def call_custom_func():
    logger.info("current_function = " + aps2.InfoParse.InfoParse.get_current_function())

    custom_function = aps2.CustomFunction.CustomFunction()

    if custom_function.json.get("static", "false") == "false":
        old_resource = aps2.ServiceId.ServiceId.get_resource_with_old_info()

        logger.info("call_custom_func : OLD = " + old_resource.apphost)
        logger.info("call_custom_func : OLD = " + old_resource.cloudadmin)
        logger.info("call_custom_func : OLD = " + old_resource.cloudpass)

        result = aps2.call_to_application.call_custom_function(old_resource, custom_function)
    else:
        cls = aps2.ServiceId.get_constructor()
        result = aps2.call_to_application.call_custom_function(cls, custom_function)

    return result


def application(environ, start_response):
    """
    'application' is main function
    :param environ: all information
    :param start_response: for response (ex. 500 Error, 204 Ok, 200 Ok)
    :return: [ str ]
    """

    try:
        global logger
        logger = aps2.uLogging.get_logger('/tmp/myapp.log', aps2.uLogging.DEBUG)
        logger.info("######################_BEGIN_######################")
        result = ''

        aps2.Info.Info.set_environ(environ)
        if aps2.InfoParse.InfoParse.get_current_function() == "/":
            logger.info("It is NOT custom function")
            if aps2.Info.Info.get_REQUEST_METHOD() == 'POST':
                result = call_method_post()
            elif aps2.Info.Info.get_REQUEST_METHOD() == 'DELETE':
                result = call_method_delete()
            elif aps2.Info.Info.get_REQUEST_METHOD() == 'GET':
                result = call_method_get()
            elif aps2.Info.Info.get_REQUEST_METHOD() == 'PUT':
                result = call_method_put()
        else:
            logger.info("It is custom function")
            result = call_custom_func()
        #
        if aps2.Info.Info.get_REQUEST_METHOD() == "DELETE":
            start_response('204 OK', [('Content-type', 'text/plain')])
        else:
            start_response('200 OK', [('Content-type', 'text/plain')])

        logger.info("######################_END_######################")
        aps2.Deleter.delete_information()
        return [result]
    except Exception as e:
        aps2.Deleter.delete_information()
        logger.info("Error: " + str(e))
        start_response('500 Internal Error', [('Content-type', 'text/plain')])
        return ["Error: " + str(e)]
