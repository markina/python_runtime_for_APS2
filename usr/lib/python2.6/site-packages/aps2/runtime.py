import pprint
import os
import re

import aps2.parsing
import aps2.service2
import aps2.utils
import aps2.parameter

import aps2.call_to_application
import aps2.printer
import aps2.function

import aps2.Types
import aps2.ServiceId
import aps2.Info
import aps2.InfoParse
import aps2.Deleter
import aps2.CustomFunction
import aps2.uLogging
import aps2.client
import aps2.utils

os.environ['APP_PATH'] = '/usr/local/share/applications/pycloud/'


def call_method_post():
    """
    Get request BODY_JSON
    Save certificates
    Create new_resource
    Call provision
    :return: json or ""
    """
    aps2.printer.print_environment()
    aps2.printer.print_request_body()
    aps2.Types.Types.save_certificate()

    constructor = aps2.ServiceId.get_constructor()
    properties = get_properties(aps2.ServiceId.ServiceId.get_schema_json())

    new_resource = constructor()
    for prop in properties:
        setattr(new_resource, prop, aps2.Info.Info.get_BODY_JSON()[prop])

    aps2.uLogging.info("NEW = " + new_resource.apphost)
    aps2.uLogging.info("NEW = " + new_resource.cloudpass)
    aps2.uLogging.info("NEW = " + new_resource.cloudadmin)

    result = aps2.call_to_application.call_provision(new_resource, properties, aps2.Info.Info.get_BODY_JSON())
    return result


def get_properties(schema):
    properties = []
    json_properties = schema["properties"]
    for prop in json_properties.items():
        properties.append(str(prop[0]))
    return properties


# see post
def call_method_get():
    old_resource = aps2.ServiceId.ServiceId.get_resource_with_old_info()

    result = aps2.call_to_application.call_retrieve(old_resource)

    return result


def call_method_put():
    old_json = aps2.ServiceId.ServiceId.get_old_json()

    constructor = aps2.ServiceId.get_constructor()
    properties = get_properties(aps2.ServiceId.ServiceId.get_schema_json())

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    aps2.uLogging.info("OLD = " + old_resource.apphost)
    aps2.uLogging.info("OLD = " + old_resource.cloudadmin)
    aps2.uLogging.info("OLD = " + old_resource.cloudpass)

    new_resource = constructor()
    for prop in properties:
        setattr(new_resource, prop, aps2.Info.Info.get_BODY_JSON()[prop])
    aps2.uLogging.info("NEW = " + new_resource.apphost)
    aps2.uLogging.info("NEW = " + new_resource.cloudpass)
    aps2.uLogging.info("NEW = " + new_resource.cloudadmin)

    result = aps2.call_to_application.call_configure(old_resource, new_resource, properties, aps2.Info.Info.get_BODY_JSON())

    return result


def call_custom_func():
    aps2.uLogging.debug("current_function = " + aps2.InfoParse.InfoParse.get_current_function())

    custom_function = aps2.CustomFunction.CustomFunction()

    if custom_function.json.get("static", "false") == "false":
        old_resource = aps2.ServiceId.ServiceId.get_resource_with_old_info()

        result = aps2.call_to_application.call_custom_function(old_resource, custom_function)
    else:
        cls = aps2.ServiceId.get_constructor()
        result = aps2.call_to_application.call_custom_function(cls, custom_function)

    if custom_function.json["verb"] == "DELETE":
         aps2.Types.Types.delete_certificate()

    return result


def application(environ, start_response):
    """
    Application is main function.
    :param environ contains all information
    :param start_response: for response (ex. 500 Error, 204 Ok, 200 Ok)
    :return: [ str ]
    """

    try:
        aps2.uLogging.basic_config('/tmp/myapp.log', aps2.uLogging.TRACE)
        aps2.uLogging.info("######################_BEGIN_######################")

        parsed_environ = aps2.parsing.ParsedEnviron(environ)

        # aps2.printer.print_environment(parsed_environ)
        # aps2.printer.print_request_body(parsed_environ)

        controller_client = aps2.client.ControllerClient(parsed_environ)

        aps2.utils.save_certificate_if_necessary(parsed_environ, controller_client)

        service_description = aps2.service2.Service(controller_client, parsed_environ)
        function_description = aps2.utils.get_function_description(parsed_environ, service_description)

        function_caller = aps2.function.FunctionCaller(
            parsed_environ,
            controller_client,
            service_description,
            function_description
        )
        function_arguments = aps2.parameter.get_arguments(function_description, parsed_environ)
        num_response, type_response, function_result = function_caller.call(
            parsed_environ,
            (argument.value for argument in function_arguments)
        )

        start_response(num_response, type_response)
        aps2.uLogging.info("######################_END_######################")

        return [function_result]
    except Exception as e:
        aps2.uLogging.error("Error: " + str(e))
        start_response('500 Internal Error', [('Content-type', 'text/plain')])
        return ["Error: " + str(e)]

