import pprint
import os
import re

import simplejson as json
import ordereddict

import xml.etree.ElementTree as ET

import aps2.apsapi
import aps2.aps
import aps2.call_to_application
import aps2.helper
import aps2.custom_function
import aps2.printer
import aps2.Types
import aps2.ServiceId

import aps2.uLogging

from apsapi import logger  # TODO

os.environ['APP_PATH'] = '/usr/local/share/applications/pycloud/'

NF_APP_META = 'APP-META.xml'
NF_LIST_SERVICES = 'list_services.json'
STRING = 'string'


def get_appmeta(json_data):
    if os.path.isfile(os.environ['APP_PATH'] + NF_APP_META):
        tree_appmeta = ET.parse(os.environ['APP_PATH'] + NF_APP_META)
    else:
        uri_appmeta = json_data["aps"]["package"]["href"] + '/APP-META.xml'
        tree_appmeta = hpr.APS_API.GET(uri_appmeta, None, None, hpr.PATH_CERTIFICATE, False)
        # this 'write' write tree_appmeta with prefix = 'ns0'
        tree_appmeta.write(os.environ['APP_PATH'] + NF_APP_META)
    return tree_appmeta.getroot()


def get_constructor(json_data):
    class_name = hpr.schema_json["name"]
   
    tree_appmeta = get_appmeta(json_data)

    appmeta_namespace = re.search('\{(.*)\}', tree_appmeta.tag).group(1)
    services = tree_appmeta.findall(".//{" + appmeta_namespace + "}service")

    script_path = ""
    for service in services:
        if service.get('id') == aps2.ServiceId.ServiceId.get_name_service_id(hpr):
            script_path = service.findall(".//{" + appmeta_namespace + "}code")[0].get('path')  # TODO
            script_path = script_path[script_path.find('/')+1:script_path.rfind('.')]
            break

    # logger.info("class_name = " + class_name)
    # logger.info('script_path = ' + script_path)

    import_script = __import__(script_path)
    constructor = getattr(import_script, class_name)       
    
    return constructor


# call_method_post work post request:
#
# 1. Get request_json (info about host_name, admin_name ... , aps.type, aps.package.href
# You can see request_json with :
#   if request_size:        if

#       logger.info('REQUEST BODY:')
#       logger.info(request_body)
# 2. Save certificate
# 3. Get schema for info about scripts (ex. class_name, properties define in scripts)
# see. clouds.schema.gen 
# 5. Create new_resource and fill properties from arrived json (request_json)
# 6. Send new_resource with properties call_provision
# 7. Return new json with properties after provision()   
def call_method_post():
    request_body = hpr.body
    request_json = hpr.body_json

    aps2.printer.print_environment(hpr.environ)
    aps2.printer.print_request_body(request_body)
    aps2.Types.Types().save_certificate(hpr)

    # logger.info("schema = ")
    # logger.info(schema)
    # logger.info("schema.name = " + schema.name)

    constructor = get_constructor(request_json)
    properties = get_properties(hpr.schema_json)

    new_resource = constructor()
    for prop in properties:
        setattr(new_resource, prop, request_json[prop])

    logger.info("NEW = " + new_resource.apphost)
    logger.info("NEW = " + new_resource.cloudpass)
    logger.info("NEW = " + new_resource.cloudadmin)
        
    result = aps2.call_to_application.call_provision(new_resource, properties, request_json)
    return result


def get_properties(schema):
    properties = []
    json_properties = schema["properties"]
    for prop in json_properties.items():
        # logger.info("1 = " + str(prop[0]))
        properties.append(str(prop[0]))
    return properties


# call_method_delete post request:
#
# 1. Get old_json   
# 3. Get schema for info about scripts (ex. class_name, properties define in scripts)
# see. clouds.schema.gen 
# 5. Create old_resource and fill properties from arrived json (old_json)
# 6. Send old_resource with properties call_unprovision
# 7. Return new json with properties after unprovision()   
def call_method_delete():
    logger.info("aps_id = " + hpr.aps_id)
    old_json = hpr.APS_API.GET("/aps/2/resources/" + hpr.aps_id, None, None, hpr.PATH_CERTIFICATE)

    constructor = get_constructor(old_json)
    properties = get_properties(hpr.schema_json)

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)
   
    result = aps2.call_to_application.call_unprovision(old_resource)

    return result


# see post
def call_method_get():
    old_json = hpr.APS_API.GET("/aps/2/resources/" + hpr.aps_id, None, None, hpr.PATH_CERTIFICATE)

    constructor = get_constructor(old_json)
    properties = get_properties(hpr.schema_json)

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)
   
    result = aps2.call_to_application.call_retrieve(old_resource, properties, old_json)

    return result


# see post
def call_method_put():
    request_body = hpr.body
    request_json = hpr.body_json
    
    # print_request_body(request_body)

    old_json = hpr.APS_API.GET("/aps/2/resources/" + hpr.aps_id, None, None, hpr.PATH_CERTIFICATE)

    constructor = get_constructor(old_json)
    properties = get_properties(hpr.schema_json)

    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    logger.info("OLD = " + old_resource.apphost)
    logger.info("OLD = " + old_resource.cloudadmin)
    logger.info("OLD = " + old_resource.cloudpass)
   
    new_resource = constructor()
    for prop in properties:
        setattr(new_resource, prop, request_json[prop])
    logger.info("NEW = " + new_resource.apphost)
    logger.info("NEW = " + new_resource.cloudpass)
    logger.info("NEW = " + new_resource.cloudadmin)
        
    result = aps2.call_to_application.call_configure(old_resource, new_resource, properties, request_json)

    return result


def call_custom_func():
    cusstom_function = aps2.custom_function.CustomFunction(hpr)

    # for parameter in current_custom_function.list_params:
   #### #     string_parameter = result_re.group(parameter.name)
    #####     logger.info(parameter.name + " = " + string_parameter)
   #### #     parameter.value = string_parameter
    # logger.info("json = " + str(valid_custom_function.json))
    # logger.info("call_name = " + valid_custom_function.call_name)
    ######### add_parameters_from_query_string(current_custom_function)

    # ###
    # logger.info("check!!")
    # for par in current_custom_function.list_params:
    #     logger.info("par = " + par.name)
    #     logger.info("par = " + par.value)
    # ###

    old_json = hpr.APS_API.GET("/aps/2/resources/" + hpr.aps_id,
                               None, None, hpr.PATH_CERTIFICATE)
    constructor = get_constructor(old_json)

    properties = get_properties(hpr.schema_json)
    old_resource = constructor()
    for prop in properties:
        setattr(old_resource, prop, old_json[prop])
    # logger.info("call_custom_func : OLD = " + old_resource.apphost)
    # logger.info("call_custom_func : OLD = " + old_resource.cloudadmin)
    # logger.info("call_custom_func : OLD = " + old_resource.cloudpass)

    ####result = aps2.call_to_application.call_custom_function(old_resource, current_custom_function, hpr)
    result = ""
    logger.info(result)

    return result


# 'application' is main function
# environ is all info. You can see info with:
#    logger.info('REQUEST ENVIRONMENT:')
#    logger.info(pprint.pformat(environ))
# 
# 'start_response' for response (ex. 500 Error, 204 Ok, 200 Ok)
def application(environ, start_response):

    try:
        global logger
        logger = aps2.uLogging.get_logger('/tmp/myapp.log', aps2.uLogging.DEBUG)

        logger.info("####################################################################")


        result = ''
        # print_environment(environ)



        global hpr
        hpr = aps2.helper.Helper()
        hpr.put_environ(environ)


        logger.info("check : get_application_service_json: ")
        aps2.printer.print_json("", aps2.Types.Types.get_application_services_json(hpr))

        if not hpr.current_function:
            logger.info("It is NOT custom function")
            if hpr.REQUEST_METHOD == 'POST':
                result = call_method_post()
            elif hpr.REQUEST_METHOD == 'DELETE':
                result = call_method_delete()
            elif hpr.REQUEST_METHOD == 'GET':
                result = call_method_get()
            elif hpr.REQUEST_METHOD == 'PUT':
                result = call_method_put()
        else:
            logger.info("It is custom function")
            logger.info("current_function = " + hpr.current_function)
            result = call_custom_func()

        if hpr.REQUEST_METHOD == "DELETE":
            start_response('204 OK', [('Content-type', 'text/plain')])
        else:
            start_response('200 OK', [('Content-type', 'text/plain')])

        logger.info("####################################################################")
        return [result]
    except Exception as e:
        logger.info("Error: " + str(e))
        start_response('500 Internal Error', [('Content-type', 'text/plain')])
        return ["Error: " + str(e)]
