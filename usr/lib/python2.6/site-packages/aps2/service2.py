import re
import os

import simplejson as json
import ordereddict


SUFFIX_SCHEMA = '.schema'


def find_name_service(path_info, list_services):
    for item in list_services:
        pattern = re.compile('/' + item)
        if pattern.match(path_info):
            return item

    raise Exception("Error: service_id in PATH_INFO not exist!")


class Schema(object):
    def __init__(self, schema, types):
        self.schema = schema
        self.list_schema = []
        for impl in schema[0].get("implements", []):
            self.list_schema.append(Schema(types.get_type(impl), types))


def get_schema(name, types):
    dir_schemas = os.environ['APP_PATH'] + 'schemas/'
    if not os.path.exists(dir_schemas):
        os.makedirs(dir_schemas)
    nf_schema = name + SUFFIX_SCHEMA
    if os.path.isfile(dir_schemas + nf_schema):
        with open(dir_schemas + nf_schema) as infile:
            schema = json.loads(infile.read(), object_pairs_hook=ordereddict.OrderedDict)
    else:
        schema = types.get_type(types.list_services[name]["type"])
        with open(dir_schemas + nf_schema, 'wb') as outfile:
            outfile.write('%s' % schema)
    return Schema(schema, types)
    # return schema[0]


class Service(object):
    def __init__(self, types, parsed_environ):
        self.name = find_name_service(parsed_environ.get("PATH_INFO"), types.list_services)
        self.tree_schemas = get_schema(self.name, types)
