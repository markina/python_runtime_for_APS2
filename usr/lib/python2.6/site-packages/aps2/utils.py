import re


class PathVerb(object):
    def __init__(self, path, verb):
        self.path = path
        self.verb = verb


def get_valid_path_verbs(tree_schemas):
    list_valid_paths = []

    for oper in tree_schemas.schema[0].get("operations", []):
        path = tree_schemas.schema[0]["operations"][oper]["path"]
        verb = tree_schemas.schema[0]["operations"][oper]["verb"]
        list_valid_paths.append(PathVerb(path, verb))

    for impl in tree_schemas.list_schema:
        list_valid_paths.extend(get_valid_path_verbs(impl))

    return list_valid_paths


def is_match(path_verb, REQUEST_METHOD, PATH_INFO):
    if path_verb.verb != REQUEST_METHOD:
        return False

    pattern = get_pattern_by_path(path_verb.path)
    if pattern.match(PATH_INFO):
        return True
    else:
        return False


def find_appropriate_path_verbs(list_valid_path_verbs, parsed_environ):
    for pv in list_valid_path_verbs:
        if is_match(pv, parsed_environ.get("REQUEST_METHOD"), parsed_environ.get("PATH_INFO")):
            return pv
    raise Exception("Not found appropriate path and verb for PATH_INFO: " + parsed_environ.get("PATH_INFO"))


def get_pattern_by_path(path):
    if path.find('{') != -1:
        name_in_path = path[:path.find('{')-1]         # name_in_path = "/calculateSomething"
        params_in_path = path[len(name_in_path)+1:]       # params_in_path = "{pathparam}/{ps}"
        re_valid_pattern = name_in_path
        for param_i in re.split("/", params_in_path):
            param_i = param_i[1:len(param_i)-1]
            re_valid_pattern += "/(?P<" + param_i + ">[0-9a-zA-Z_]*)"  # TODO fix [a-zA-Z][0-9a-zA-Z_]*
    else:
        re_valid_pattern = path

    re_valid_pattern = "(/.+)?(/[\w-]{36})?" + re_valid_pattern

    return re.compile(re_valid_pattern)
